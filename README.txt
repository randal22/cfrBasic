Project consists of 3 folders, cfrBasic, Cfrm and training


cfrBasic and Cfrm:

cfrWhist.sln is a visual studio project in cfrBasic, for the generation of CFR data of a simplified version of whist, with both single and multithread support.
It is based on an implementation found here, https://github.com/brianberns/Cfrm.
 
The f# files for the adjusted implementation of the CFR algorithm are contained in Cfrm folder. 

In program.cs, the Main method contains the following values that can be adjusted:
	    bool multiThread = true; //toggle for multi-threading
            bool fileMergingEnabled = false; //toggle for merging of strategy files
            var numIterations = 100000; //number of iterations to run
            int progressInterval = numIterations/10; //interval to print progress

training: 
	
The training folder contains python code for the training and testing of a neural network using data generated by CFR.
It uses a copy of strategy.csv that was generated by 100 million iterations of CFR on a single thread. 

This code makes use of the pytorch library. It's CPU compute platform was used for this project. Libarary found at https://pytorch.org/ 



loadEncode.py contains file parsing logic, to adjust the data into tensors so the model can make use of it. It is imported by both model train and test files.

modelTrain.py contains the training of the model. 

modelCheck.py allows for a model to be quickly checked by the user by eye. 

whistTest.py contains testing of model against random and greedy agents as well as a human opponent.
	
	At the end of this file the following is adjustable:

	iterations(number of iterations for computer pairings)
	humanIter(number of iteration for human vs computer pairings)
	
	function calls can be uncommented/commented to enable/disable testing of different pairings
 


	